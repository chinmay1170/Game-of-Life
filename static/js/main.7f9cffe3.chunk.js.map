{"version":3,"sources":["index.js"],"names":["Box","selectBox","props","row","col","className","this","boxClass","id","onClick","Component","Grid","width","cols","rowsArr","i","rows","j","boxId","gridFull","push","key","style","Buttons","handleSelect","evt","gridSize","marginRight","playButton","pauseButton","clear","slow","fast","seed","title","onSelect","Item","eventKey","Main","gridcopy","arrayClone","state","setState","Math","floor","random","clearInterval","intervalId","setInterval","play","speed","grid","Array","fill","map","generation","size","g","g2","count","arr","JSON","parse","stringify","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7f9cffe3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { ButtonToolbar, DropdownButton, Dropdown } from \"react-bootstrap\";\r\n\r\nclass Box extends Component {\r\n  selectBox = () => {\r\n    this.props.selectBox(this.props.row, this.props.col);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className={this.props.boxClass}\r\n        id={this.props.id}\r\n        onClick={this.selectBox}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nclass Grid extends Component {\r\n  render() {\r\n    const width = this.props.cols * 14;\r\n    var rowsArr = [];\r\n\r\n    var boxClass = \"\";\r\n    for (var i = 0; i < this.props.rows; i++) {\r\n      for (var j = 0; j < this.props.cols; j++) {\r\n        let boxId = i + \"_\" + j;\r\n\r\n        boxClass = this.props.gridFull[i][j] ? \"box on\" : \"box off\"; //to decide live or dead\r\n        rowsArr.push(\r\n          <Box\r\n            boxClass={boxClass}\r\n            key={boxId}\r\n            boxId={boxId}\r\n            row={i}\r\n            col={j}\r\n            selectBox={this.props.selectBox}\r\n          />\r\n        );\r\n      }\r\n    }\r\n    return (\r\n      <div className=\"grid\" style={{ width: width }}>\r\n        {rowsArr}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Buttons extends Component {\r\n  handleSelect = (evt) => {\r\n    this.props.gridSize(evt);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"center\">\r\n        <ButtonToolbar>\r\n          <button\r\n            className=\"btn btn-success\"\r\n            style={{ marginRight: 5 }}\r\n            onClick={this.props.playButton}\r\n          >\r\n            Play\r\n          </button>\r\n          <button\r\n            className=\"btn btn-danger\"\r\n            style={{ marginRight: 5 }}\r\n            onClick={this.props.pauseButton}\r\n          >\r\n            Pause\r\n          </button>\r\n          <button\r\n            className=\"btn btn-secondary\"\r\n            style={{ marginRight: 5 }}\r\n            onClick={this.props.clear}\r\n          >\r\n            Clear\r\n          </button>\r\n          <button\r\n            className=\"btn btn-warning\"\r\n            style={{ marginRight: 5 }}\r\n            onClick={this.props.slow}\r\n          >\r\n            Slow\r\n          </button>\r\n          <button\r\n            className=\"btn btn-warning\"\r\n            style={{ marginRight: 5 }}\r\n            onClick={this.props.fast}\r\n          >\r\n            Fast\r\n          </button>\r\n          <button\r\n            className=\"btn btn-info\"\r\n            style={{ marginRight: 5 }}\r\n            onClick={this.props.seed}\r\n          >\r\n            Random Fill\r\n          </button>\r\n\r\n          <DropdownButton\r\n            title=\"Grid Size\"\r\n            id=\"size-menu\"\r\n            onSelect={this.handleSelect}\r\n          >\r\n            <Dropdown.Item eventKey=\"1\">20x10</Dropdown.Item>\r\n            <Dropdown.Item eventKey=\"2\">50x30</Dropdown.Item>\r\n            <Dropdown.Item eventKey=\"3\">70x50</Dropdown.Item>\r\n          </DropdownButton>\r\n        </ButtonToolbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Main extends Component {\r\n  constructor() {\r\n    super();\r\n    this.speed = 100;\r\n    this.rows = 30; // these are not in state because we are using this to create the grid.\r\n    this.cols = 50;\r\n    this.state = {\r\n      generation: 0,\r\n      gridFull: Array(this.rows)\r\n        .fill()\r\n        .map(() => Array(this.cols).fill(false)),\r\n    };\r\n  }\r\n\r\n  selectBox = (row, col) => {\r\n    let gridcopy = arrayClone(this.state.gridFull);\r\n    gridcopy[row][col] = !gridcopy[row][col];\r\n    this.setState({\r\n      gridFull: gridcopy,\r\n    });\r\n  };\r\n\r\n  seed = () => {\r\n    let gridcopy = arrayClone(this.state.gridFull);\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.cols; j++) {\r\n        if (Math.floor(Math.random() * 4) === 1) {\r\n          gridcopy[i][j] = true;\r\n        }\r\n      }\r\n    }\r\n    this.setState({\r\n      gridFull: gridcopy,\r\n    });\r\n  };\r\n\r\n  playButton = () => {\r\n    clearInterval(this.intervalId);\r\n    this.intervalId = setInterval(this.play, this.speed);\r\n  };\r\n\r\n  pauseButton = () => {\r\n    clearInterval(this.intervalId);\r\n  };\r\n\r\n  slow = () => {\r\n    this.speed = 1000;\r\n    this.playButton();\r\n  };\r\n\r\n  fast = () => {\r\n    this.speed = 100;\r\n    this.playButton();\r\n  };\r\n\r\n  clear = () => {\r\n    var grid = Array(this.rows)\r\n      .fill()\r\n      .map(() => Array(this.cols).fill(false));\r\n    this.setState({\r\n      gridFull: grid,\r\n      generation: 0,\r\n    });\r\n    this.pauseButton();\r\n  };\r\n\r\n  gridSize = (size) => {\r\n    switch (size) {\r\n      case \"1\":\r\n        this.cols = 20;\r\n        this.rows = 10;\r\n        break;\r\n      case \"2\":\r\n        this.cols = 50;\r\n        this.rows = 30;\r\n        break;\r\n      default:\r\n        this.cols = 70;\r\n        this.rows = 50;\r\n    }\r\n    this.clear();\r\n  };\r\n\r\n  play = () => {\r\n    let g = this.state.gridFull;\r\n    let g2 = arrayClone(this.state.gridFull);\r\n\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.cols; j++) {\r\n        //Counting Number of alive neighbours\r\n        let count = 0;\r\n        if (i > 0) if (g[i - 1][j]) count++;\r\n        if (i > 0 && j > 0) if (g[i - 1][j - 1]) count++;\r\n        if (i > 0 && j < this.cols - 1) if (g[i - 1][j + 1]) count++;\r\n        if (j < this.cols - 1) if (g[i][j + 1]) count++;\r\n        if (j > 0) if (g[i][j - 1]) count++;\r\n        if (i < this.rows - 1) if (g[i + 1][j]) count++;\r\n        if (i < this.rows - 1 && j > 0) if (g[i + 1][j - 1]) count++;\r\n        if (i < this.rows - 1 && j < this.cols - 1)\r\n          if (g[i + 1][j + 1]) count++;\r\n\r\n        //Decide it will live or not\r\n        if (g[i][j] && (count < 2 || count > 3)) g2[i][j] = false;\r\n        if (!g[i][j] && count === 3) g2[i][j] = true;\r\n      }\r\n    }\r\n    this.setState({\r\n      gridFull: g2,\r\n      generation: this.state.generation + 1,\r\n    });\r\n  };\r\n  componentDidMount() {\r\n    this.seed();\r\n    this.playButton();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1> The Game of Life </h1>\r\n        <Buttons\r\n          playButton={this.playButton}\r\n          pauseButton={this.pauseButton}\r\n          slow={this.slow}\r\n          fast={this.fast}\r\n          clear={this.clear}\r\n          seed={this.seed}\r\n          gridSize={this.gridSize}\r\n        />\r\n        <Grid\r\n          gridFull={this.state.gridFull}\r\n          rows={this.rows}\r\n          cols={this.cols}\r\n          selectBox={this.selectBox}\r\n        />\r\n        <h2>Generations: {this.state.generation}</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction arrayClone(arr) {\r\n  return JSON.parse(JSON.stringify(arr)); //to clone the array\r\n}\r\n\r\nReactDOM.render(<Main />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}